name: Enforce Tiered Approvals

on:
  pull_request_review:
    types:
      - submitted
      - edited
      - dismissed

jobs:
  enforce_tiered_approvals:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Parse CODEOWNERS file
        id: parse_codeowners
        run: |
          echo "Parsing CODEOWNERS file..."
          declare -A CODEOWNERS
          declare -A TIER2_REVIEWERS

          while IFS= read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue

            # Detect tier2 reviewers
            if [[ "$line" =~ "# tier2" ]]; then
              reviewers=$(echo "$line" | awk '{$1=""; $NF=""; print $0}' | xargs)
              for reviewer in $reviewers; do
                TIER2_REVIEWERS["$reviewer"]=1
              done
              continue
            fi

          done < CODEOWNERS

          # Export TIER2 Reviewers as JSON
          echo "$(declare -p TIER2_REVIEWERS)" > tier2reviewers.json
          echo "TIER2 reviewers exported to JSON."

      - name: Get PR reviews
        id: get_reviews
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            const latestReviews = {};
            for (const review of reviews) {
              latestReviews[review.user.login] = review.state;
            }

            console.log('Latest Reviews:', latestReviews);

            const approvedUsers = Object.keys(latestReviews).filter(user => latestReviews[user] === 'APPROVED');

            core.setOutput('approvedUsers', approvedUsers.join(','));

      - name: Check +2 approvals (global tier)
        id: check_tier2
        run: |
          echo "Checking for +2 approvals..."
          APPROVED_USERS="${{ steps.get_reviews.outputs.approvedUsers }}"

          # Load TIER2_REVIEWERS mapping
          declare -A TIER2_REVIEWERS
          eval "$(cat tier2reviewers.json)"

          TIER2_APPROVED=false

          echo "Approved Users: $APPROVED_USERS"

          # Iterate over approved users and compare with cleaned TIER2_REVIEWERS
          for USER in ${APPROVED_USERS//,/ }; do
            echo "Checking approved USER: $USER"
            echo "TIER2_REVIEWERS: ${!TIER2_REVIEWERS[@]}"
            for REVIEWER in "${!TIER2_REVIEWERS[@]}"; do
              # Strip '@' from REVIEWER
              CLEAN_REVIEWER="${REVIEWER#@}"
              echo "Comparing USER: $USER with CLEAN_REVIEWER: $CLEAN_REVIEWER"
              if [[ "$USER" == "$CLEAN_REVIEWER" ]]; then
                TIER2_APPROVED=true
                break 2
              fi
            done
          done

          if [[ "$TIER2_APPROVED" == "true" ]]; then
            echo "tier2Approved=true" >> $GITHUB_ENV
          else
            echo "tier2Approved=false" >> $GITHUB_ENV
          fi

          echo "TIER2_APPROVED: $TIER2_APPROVED"


      - name: Enforce approval requirements
        run: |
          echo "Enforcing approval requirements..."

          if [[ "$tier2Approved" != "true" ]]; then
            echo "ERROR: No +2 reviewer has approved the pull request."
            exit 1
          fi

          echo "All tiered 2 approval requirements met. Proceeding."
